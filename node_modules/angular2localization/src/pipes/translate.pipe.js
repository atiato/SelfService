/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Pipe } from '@angular/core';
import { LocalizationService, ServiceState } from '../services/localization.service';
import { LocaleService } from '../services/locale.service';
import { I18nPlural } from '../services/i18n';
/**
 * TranslatePipe class.
Translates messages.

\@author Roberto Simonetti
 */
export var TranslatePipe = (function (_super) {
    __extends(TranslatePipe, _super);
    /**
     * @param {?} localization
     * @param {?} locale
     */
    function TranslatePipe(localization, locale) {
        _super.call(this, locale);
        this.localization = localization;
        this.locale = locale;
    }
    /**
     * TranslatePipe transform method.
    
    \@param key The key to be translated
    \@param lang The current language code for the LocalizationService
    \@param args Optional parameters
    \@return The value of translation
     * @param {?} key
     * @param {?} lang
     * @param {...?} args
     * @return {?}
     */
    TranslatePipe.prototype.transform = function (key, lang) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        // Checks the service state.
        if (this.localization.serviceState == ServiceState.isReady) {
            // Looks for a number at the beginning of the key. 
            key = this.translateNumber(key);
            // Gets the value of translation for the key string.
            var /** @type {?} */ value = this.localization.translate(this.keyStr, args[0], lang);
            return key.replace(this.keyStr, value);
        }
        // If the service is not ready, returns an empty string.
        return "";
    };
    TranslatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'translate',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    TranslatePipe.ctorParameters = function () { return [
        { type: LocalizationService, },
        { type: LocaleService, },
    ]; };
    return TranslatePipe;
}(I18nPlural));
function TranslatePipe_tsickle_Closure_declarations() {
    /** @type {?} */
    TranslatePipe.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    TranslatePipe.ctorParameters;
    /** @type {?} */
    TranslatePipe.prototype.localization;
    /** @type {?} */
    TranslatePipe.prototype.locale;
}
//# sourceMappingURL=translate.pipe.js.map