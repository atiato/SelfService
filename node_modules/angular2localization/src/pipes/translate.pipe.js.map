{"version":3,"file":"translate.pipe.js","sourceRoot":"","sources":["../../../src/pipes/translate.pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAEI,EAAE,IAAI,EAAiB,MAAM,eAAe;OAG5C,EAAE,mBAAmB,EAAE,YAAY,EAAE,MAAM,kCAAkC;OAC7E,EAAE,aAAa,EAAE,MAAM,4BAA4B;OACnD,EAAE,UAAU,EAAE,MAAM,kBAAkB;AAC7C;;;;;GAKG;AACH;IAAmC,iCAAU;IAC7C;;;OAGG;IACH,uBAAmB,YAAiC,EAC7C,MAAqB;QACpB,kBAAM,MAAM,CAAC,CAAC;QAFH,iBAAY,GAAZ,YAAY,CAAqB;QAC7C,WAAM,GAAN,MAAM,CAAe;IAExB,CAAC;IACL;;;;;;;;;;;OAWG;IACI,iCAAS,GAAhB,UAAiB,GAAW,EAAE,IAAY;QAAE,cAAmB;aAAnB,WAAmB,CAAnB,sBAAmB,CAAnB,IAAmB;YAAnB,6BAAmB;;QAEvD,4BAA4B;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;YAEzD,mDAAmD;YACnD,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAEhC,oDAAoD;YACpD,IAAI,gBAAgB,CAAC,KAAK,GAAW,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAE7F,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAE3C,CAAC;QAED,wDAAwD;QACxD,MAAM,CAAC,EAAE,CAAC;IAEd,CAAC;IAEE,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;oBACjB,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,IAAI;iBACb,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,mBAAmB,GAAG;QAC7B,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAH6F,CAG7F,CAAC;IACF,oBAAC;AAAD,CAAC,AApDD,CAAmC,UAAU,GAoD5C;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,YAAY,CAAC;IACrC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;AAC/B,CAAC","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n// Services.\r\nimport { LocalizationService, ServiceState } from '../services/localization.service';\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { I18nPlural } from '../services/i18n';\n/**\n * TranslatePipe class.\rTranslates messages.\r\r\\@author Roberto Simonetti\n */\nexport class TranslatePipe extends I18nPlural implements PipeTransform {\n/**\n * @param {?} localization\n * @param {?} locale\n */\nconstructor(public localization: LocalizationService,\npublic locale: LocaleService) {\r\n        super(locale);\r\n    }\n/**\n * TranslatePipe transform method.\r\r\\@param key The key to be translated\r\\@param lang The current language code for the LocalizationService\r\\@param args Optional parameters\r\\@return The value of translation\n * @param {?} key\n * @param {?} lang\n * @param {...?} args\n * @return {?}\n */\npublic transform(key: string, lang: string, ...args: Array<any>): string {\r\n\r\n        // Checks the service state.\r\n        if (this.localization.serviceState == ServiceState.isReady) {\r\n\r\n            // Looks for a number at the beginning of the key. \r\n            key = this.translateNumber(key);\r\n\r\n            // Gets the value of translation for the key string.\r\n            var /** @type {?} */ value: string = this.localization.translate(this.keyStr, args[0], lang);\r\n\r\n            return key.replace(this.keyStr, value);\r\n\r\n        }\r\n\r\n        // If the service is not ready, returns an empty string.\r\n        return \"\";\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'translate',\r\n    pure: true\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocalizationService, },\n{type: LocaleService, },\n];\n}\n\nfunction TranslatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslatePipe.ctorParameters;\n/** @type {?} */\nTranslatePipe.prototype.localization;\n/** @type {?} */\nTranslatePipe.prototype.locale;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}