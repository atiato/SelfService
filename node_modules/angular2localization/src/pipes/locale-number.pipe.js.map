{"version":3,"file":"locale-number.pipe.js","sourceRoot":"","sources":["../../../src/pipes/locale-number.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';\r\n\r\n// Services.\r\nimport { IntlSupport } from '../services/Intl-support';\n/**\n * LocaleDecimalPipe class.\rLocalizes decimal numbers.\r\r\\@author Roberto Simonetti\r\\@see Angular 2 DecimalPipe for further information\n */\nexport class LocaleDecimalPipe implements PipeTransform {\n/**\n * LocaleDecimalPipe transform method.\r\r\\@param value The number to be localized\r\\@param defaultLocale The default locale\r\\@param digits The format of the number\r\\@return The locale decimal\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits: string = null): string {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            var /** @type {?} */ localeDecimal: DecimalPipe = new DecimalPipe(defaultLocale);\r\n\r\n            return localeDecimal.transform(value, digits);\r\n\r\n        }\r\n\r\n        // Returns the number without localization.\r\n        return value;\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeDecimal',\r\n    pure: true\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleDecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDecimalPipe.ctorParameters;\n}\n\n/**\n * LocalePercentPipe class.\rLocalizes percent numbers.\r\r\\@author Roberto Simonetti\r\\@see Angular 2 PercentPipe for further information\n */\nexport class LocalePercentPipe implements PipeTransform {\n/**\n * LocalePercentPipe transform method.\r\r\\@param value The number to be localized\r\\@param defaultLocale The default locale\r\\@param digits The format of the number\r\\@return The locale percent\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits: string = null): string {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            var /** @type {?} */ localePercent: PercentPipe = new PercentPipe(defaultLocale);\r\n\r\n            return localePercent.transform(value, digits);\r\n\r\n        }\r\n\r\n        // Returns the number without localization.\r\n        return value;\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localePercent',\r\n    pure: true\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalePercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalePercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalePercentPipe.ctorParameters;\n}\n\n/**\n * LocaleCurrencyPipe class.\rLocalizes currencies.\r\r\\@author Roberto Simonetti\r\\@see Angular 2 CurrencyPipe for further information\n */\nexport class LocaleCurrencyPipe implements PipeTransform {\n/**\n * LocaleCurrencyPipe transform method.\r\r\\@param value The number to be localized\r\\@param defaultLocale The default locale\r\\@param currency The current currency\r\\@param symbolDisplay Indicates whether to use the currency symbol\r\\@param digits The format of the number\r\\@return The locale currency\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?} currency\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\npublic transform(\r\n        value: any,\r\n        defaultLocale: string,\r\n        currency: string,\r\n        symbolDisplay: boolean = false,\r\n        digits: string = null): string {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            var /** @type {?} */ localeCurrency: CurrencyPipe = new CurrencyPipe(defaultLocale);\r\n\r\n            return localeCurrency.transform(value, currency, symbolDisplay, digits);\r\n\r\n        }\r\n\r\n        // Returns the number without localization & currency.\r\n        return value + \" \" + currency;\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeCurrency',\r\n    pure: true\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleCurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleCurrencyPipe.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}