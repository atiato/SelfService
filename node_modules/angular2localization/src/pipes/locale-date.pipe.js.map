{"version":3,"file":"locale-date.pipe.js","sourceRoot":"","sources":["../../../src/pipes/locale-date.pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAE,IAAI,EAAiB,MAAM,eAAe;OAC5C,EAAE,QAAQ,EAAE,MAAM,iBAAiB;OAGnC,EAAE,WAAW,EAAE,MAAM,0BAA0B;AACtD;;;;;;GAMG;AACH;IAAA;IAsCA,CAAC;IArCD;;;;;;;;;;;OAWG;IACI,kCAAS,GAAhB,UAAiB,KAAU,EAAE,aAAqB,EAAE,OAA8B;QAA9B,uBAA8B,GAA9B,sBAA8B;QAE1E,+BAA+B;QAC/B,EAAE,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAEpD,IAAI,gBAAgB,CAAC,UAAU,GAAa,IAAI,QAAQ,CAAC,aAAa,CAAC,CAAC;YAExE,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAEhD,CAAC;QAED,yCAAyC;QACzC,MAAM,CAAC,KAAK,CAAC;IAEjB,CAAC;IAEE,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;oBACjB,IAAI,EAAE,YAAY;oBAClB,IAAI,EAAE,IAAI;iBACb,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,qBAAC;AAAD,CAAC,AAtCD,IAsCC;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;AAC9B,CAAC","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n// Services.\r\nimport { IntlSupport } from '../services/Intl-support';\n/**\n * LocaleDatePipe class.\rLocalizes dates.\r\r\\@author Roberto Simonetti\r\\@see Angular 2 DatePipe for further information\n */\nexport class LocaleDatePipe implements PipeTransform {\n/**\n * LocaleDatePipe transform method.\r\r\\@param value The date to be localized\r\\@param defaultLocale The default locale\r\\@param pattern The format of the date\r\\@return The locale date\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} pattern\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, pattern: string = 'mediumDate'): string {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.DateTimeFormat(defaultLocale) == true) {\r\n\r\n            var /** @type {?} */ localeDate: DatePipe = new DatePipe(defaultLocale);\r\n\r\n            return localeDate.transform(value, pattern);\r\n\r\n        }\r\n\r\n        // Returns the date without localization.\r\n        return value;\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeDate',\r\n    pure: true\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleDatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDatePipe.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}