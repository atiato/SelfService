/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
import { Directive, ElementRef, Input, Renderer } from '@angular/core';
import { LocalizationService } from '../services/localization.service';
/**
 * TranslateDirective class.
Translate by an attribute directive.

\@author Roberto Simonetti
 */
export var TranslateDirective = (function () {
    /**
     * @param {?} localization
     * @param {?} el
     * @param {?} renderer
     */
    function TranslateDirective(localization, el, renderer) {
        this.localization = localization;
        this.el = el;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    TranslateDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        var /** @type {?} */ renderNode = this.el.nativeElement.childNodes[0];
        var /** @type {?} */ key = (renderNode.nodeValue);
        this.translate(renderNode, key);
        this.localization.translationChanged.subscribe(function () {
            _this.translate(renderNode, key);
        });
    };
    /**
     * @param {?} renderNode
     * @param {?} key
     * @return {?}
     */
    TranslateDirective.prototype.translate = function (renderNode, key) {
        var _this = this;
        this.localization.translateAsync(key, this.params).subscribe(function (value) {
            _this.renderer.setText(renderNode, value);
        });
    };
    TranslateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[translate]'
                },] },
    ];
    /** @nocollapse */
    TranslateDirective.ctorParameters = function () { return [
        { type: LocalizationService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    TranslateDirective.propDecorators = {
        'params': [{ type: Input, args: ['translate',] },],
    };
    return TranslateDirective;
}());
function TranslateDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    TranslateDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    TranslateDirective.ctorParameters;
    /** @type {?} */
    TranslateDirective.propDecorators;
    /** @type {?} */
    TranslateDirective.prototype.params;
    /** @type {?} */
    TranslateDirective.prototype.localization;
    /** @type {?} */
    TranslateDirective.prototype.el;
    /** @type {?} */
    TranslateDirective.prototype.renderer;
}
//# sourceMappingURL=translate.directive.js.map