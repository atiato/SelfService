/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Directive, ElementRef, Input, Renderer } from '@angular/core';
import { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';
import { LocaleDirective } from '../services/i18n';
import { LocaleService } from '../services/locale.service';
import { IntlSupport } from '../services/Intl-support';
/**
 * LocaleDecimalDirective class.
Localizes decimal numbers by an attribute directive.

\@author Roberto Simonetti
 */
export var LocaleDecimalDirective = (function (_super) {
    __extends(LocaleDecimalDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleDecimalDirective(locale, el, renderer) {
        _super.call(this, locale, el, renderer);
        this.locale = locale;
        this.defaultDigits = null;
    }
    /**
     * @param {?} renderNode
     * @param {?} value
     * @return {?}
     */
    LocaleDecimalDirective.prototype.localize = function (renderNode, value) {
        var /** @type {?} */ defaultLocale = this.locale.getDefaultLocale();
        // Checks for support for Intl.
        if (IntlSupport.NumberFormat(defaultLocale) == true) {
            var /** @type {?} */ localeDecimal = new DecimalPipe(defaultLocale);
            this.renderer.setText(renderNode, localeDecimal.transform(value, this.digits || this.defaultDigits));
        }
    };
    LocaleDecimalDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[localeDecimal]'
                },] },
    ];
    /** @nocollapse */
    LocaleDecimalDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    LocaleDecimalDirective.propDecorators = {
        'digits': [{ type: Input, args: ['localeDecimal',] },],
    };
    return LocaleDecimalDirective;
}(LocaleDirective));
function LocaleDecimalDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleDecimalDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleDecimalDirective.ctorParameters;
    /** @type {?} */
    LocaleDecimalDirective.propDecorators;
    /** @type {?} */
    LocaleDecimalDirective.prototype.digits;
    /** @type {?} */
    LocaleDecimalDirective.prototype.defaultDigits;
    /** @type {?} */
    LocaleDecimalDirective.prototype.locale;
}
/**
 * LocalePercentDirective class.
Localizes percent numbers by an attribute directive.

\@author Roberto Simonetti
 */
export var LocalePercentDirective = (function (_super) {
    __extends(LocalePercentDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocalePercentDirective(locale, el, renderer) {
        _super.call(this, locale, el, renderer);
        this.locale = locale;
        this.defaultDigits = null;
    }
    /**
     * @param {?} renderNode
     * @param {?} value
     * @return {?}
     */
    LocalePercentDirective.prototype.localize = function (renderNode, value) {
        var /** @type {?} */ defaultLocale = this.locale.getDefaultLocale();
        // Checks for support for Intl.
        if (IntlSupport.NumberFormat(defaultLocale) == true) {
            var /** @type {?} */ localePercent = new PercentPipe(defaultLocale);
            this.renderer.setText(renderNode, localePercent.transform(value, this.digits || this.defaultDigits));
        }
    };
    LocalePercentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[localePercent]'
                },] },
    ];
    /** @nocollapse */
    LocalePercentDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    LocalePercentDirective.propDecorators = {
        'digits': [{ type: Input, args: ['localePercent',] },],
    };
    return LocalePercentDirective;
}(LocaleDirective));
function LocalePercentDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocalePercentDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocalePercentDirective.ctorParameters;
    /** @type {?} */
    LocalePercentDirective.propDecorators;
    /** @type {?} */
    LocalePercentDirective.prototype.digits;
    /** @type {?} */
    LocalePercentDirective.prototype.defaultDigits;
    /** @type {?} */
    LocalePercentDirective.prototype.locale;
}
/**
 * LocaleCurrencyDirective class.
Localizes currencies by an attribute directive.

\@author Roberto Simonetti
 */
export var LocaleCurrencyDirective = (function (_super) {
    __extends(LocaleCurrencyDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleCurrencyDirective(locale, el, renderer) {
        _super.call(this, locale, el, renderer);
        this.locale = locale;
        this.symbolDisplay = false;
        this.defaultDigits = null;
    }
    Object.defineProperty(LocaleCurrencyDirective.prototype, "symbol", {
        /**
         * @param {?} symbolDisplay
         * @return {?}
         */
        set: function (symbolDisplay) {
            this.symbolDisplay = symbolDisplay || this.symbolDisplay;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} renderNode
     * @param {?} value
     * @return {?}
     */
    LocaleCurrencyDirective.prototype.localize = function (renderNode, value) {
        var /** @type {?} */ defaultLocale = this.locale.getDefaultLocale();
        var /** @type {?} */ currency = this.locale.getCurrentCurrency();
        // Checks for support for Intl.
        if (IntlSupport.NumberFormat(defaultLocale) == true) {
            var /** @type {?} */ localeCurrency = new CurrencyPipe(defaultLocale);
            this.renderer.setText(renderNode, localeCurrency.transform(value, currency, this.symbolDisplay, this.digits || this.defaultDigits));
        }
    };
    LocaleCurrencyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[localeCurrency]'
                },] },
    ];
    /** @nocollapse */
    LocaleCurrencyDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    LocaleCurrencyDirective.propDecorators = {
        'digits': [{ type: Input, args: ['localeCurrency',] },],
        'symbol': [{ type: Input },],
    };
    return LocaleCurrencyDirective;
}(LocaleDirective));
function LocaleCurrencyDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleCurrencyDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleCurrencyDirective.ctorParameters;
    /** @type {?} */
    LocaleCurrencyDirective.propDecorators;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.digits;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.symbolDisplay;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.defaultDigits;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.locale;
}
//# sourceMappingURL=locale-number.directive.js.map