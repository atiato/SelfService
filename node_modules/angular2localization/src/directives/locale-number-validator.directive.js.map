{"version":3,"file":"locale-number-validator.directive.js","sourceRoot":"","sources":["../../../src/directives/locale-number-validator.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Directive, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, FormControl, Validator } from '@angular/forms';\r\n\r\n// Services.\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { LocaleParser } from '../services/locale-parser';\n/**\n * Function that takes a Control and returns either null when it’s valid, or and error object if it’s not.\r\r\\@param locale The reference to LocaleService\r\\@param digits The format of the number\r\\@param MIN_VALUE The minimum value for the number\r\\@param MAX_VALUE The maximum value for the number\r\\@return An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid\n * @param {?} locale\n * @param {?} digits\n * @param {?=} MIN_VALUE\n * @param {?=} MAX_VALUE\n * @return {?}\n */\nexport function validateLocaleNumber(locale: LocaleService, digits: string, MIN_VALUE: number = Number.MIN_VALUE, MAX_VALUE: number = Number.MAX_VALUE): Function {\r\n\r\n    var /** @type {?} */ defaultLocale: string;\r\n    var /** @type {?} */ NUMBER_REGEXP: RegExp;\r\n\r\n    return (c: FormControl): { [key: string]: any } => {\r\n\r\n        // Checks if the default locale has changed. \r\n        if (defaultLocale != locale.getDefaultLocale()) {\r\n\r\n            NUMBER_REGEXP = LocaleParser.NumberRegExpFactory(locale.getDefaultLocale(), digits);\r\n            defaultLocale = locale.getDefaultLocale();\r\n\r\n        }\r\n\r\n        // Checks the format.\r\n        if (NUMBER_REGEXP.test(c.value)) {\r\n\r\n            var /** @type {?} */ parsedValue: number;\r\n\r\n            parsedValue = LocaleParser.Number(c.value, locale.getDefaultLocale());\r\n\r\n            if (parsedValue < MIN_VALUE) {\r\n\r\n                return {\r\n                    minValue: {\r\n                        valid: false\r\n                    }\r\n                };\r\n\r\n            } else if (parsedValue > MAX_VALUE) {\r\n\r\n                return {\r\n                    maxValue: {\r\n                        valid: false\r\n                    }\r\n                };\r\n\r\n            }\r\n\r\n            return null; // The number is valid.\r\n\r\n        } else {\r\n\r\n            return {\r\n                format: {\r\n                    valid: false\r\n                }\r\n            };\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\n/**\n * LocaleNumberValidator class.\rValidates a number by default locale.\r\r\\@author Roberto Simonetti\n */\nexport class LocaleNumberValidator implements Validator, OnInit {\r\n\r\n    /**\r\n     * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.\r\n     */\r\n     digits: string;\n/**\n * @param {?} value\n * @return {?}\n */\nset minValue(value: number) {\r\n\r\n        this.MIN_VALUE = value || this.MIN_VALUE;\r\n\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxValue(value: number) {\r\n\r\n        this.MAX_VALUE = value || this.MAX_VALUE;\r\n\r\n    }\nprivate MIN_VALUE: number = Number.MIN_VALUE;\nprivate MAX_VALUE: number = Number.MAX_VALUE;\nprivate validator: Function;\n/**\n * @param {?} locale\n */\nconstructor(public locale: LocaleService) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\r\n\r\n        this.validator = validateLocaleNumber(this.locale, this.digits, this.MIN_VALUE, this.MAX_VALUE);\r\n\r\n    }\n/**\n * @param {?} c\n * @return {?}\n */\npublic validate(c: FormControl): Function {\r\n\r\n        return this.validator(c);\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[validateLocaleNumber][ngModel],[validateLocaleNumber][formControl]', // Validator works with ngModel and formControl directives.\r\n    providers: [\r\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => LocaleNumberValidator), multi: true }\r\n    ]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'digits': [{ type: Input, args: ['validateLocaleNumber', ] },],\n'minValue': [{ type: Input },],\n'maxValue': [{ type: Input },],\n};\n}\n\nfunction LocaleNumberValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleNumberValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleNumberValidator.ctorParameters;\n/** @type {?} */\nLocaleNumberValidator.propDecorators;\n/**\n * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.\n * @type {?}\n */\nLocaleNumberValidator.prototype.digits;\n/** @type {?} */\nLocaleNumberValidator.prototype.MIN_VALUE;\n/** @type {?} */\nLocaleNumberValidator.prototype.MAX_VALUE;\n/** @type {?} */\nLocaleNumberValidator.prototype.validator;\n/** @type {?} */\nLocaleNumberValidator.prototype.locale;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}