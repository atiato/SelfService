/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Directive, ElementRef, Input, Renderer } from '@angular/core';
import { DatePipe } from '@angular/common';
import { LocaleDirective } from '../services/i18n';
import { LocaleService } from '../services/locale.service';
import { IntlSupport } from '../services/Intl-support';
/**
 * LocaleDateDirective class.
Localizes dates by an attribute directive.

\@author Roberto Simonetti
 */
export var LocaleDateDirective = (function (_super) {
    __extends(LocaleDateDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleDateDirective(locale, el, renderer) {
        _super.call(this, locale, el, renderer);
        this.locale = locale;
        this.defaultPattern = 'mediumDate';
    }
    /**
     * @param {?} renderNode
     * @param {?} value
     * @return {?}
     */
    LocaleDateDirective.prototype.localize = function (renderNode, value) {
        var /** @type {?} */ defaultLocale = this.locale.getDefaultLocale();
        // Checks for support for Intl.
        if (IntlSupport.DateTimeFormat(defaultLocale) == true) {
            var /** @type {?} */ localeDate = new DatePipe(defaultLocale);
            this.renderer.setText(renderNode, localeDate.transform(value, this.pattern || this.defaultPattern));
        }
    };
    LocaleDateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[localeDate]'
                },] },
    ];
    /** @nocollapse */
    LocaleDateDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    LocaleDateDirective.propDecorators = {
        'pattern': [{ type: Input, args: ['localeDate',] },],
    };
    return LocaleDateDirective;
}(LocaleDirective));
function LocaleDateDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleDateDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleDateDirective.ctorParameters;
    /** @type {?} */
    LocaleDateDirective.propDecorators;
    /** @type {?} */
    LocaleDateDirective.prototype.pattern;
    /** @type {?} */
    LocaleDateDirective.prototype.defaultPattern;
    /** @type {?} */
    LocaleDateDirective.prototype.locale;
}
//# sourceMappingURL=locale-date.directive.js.map