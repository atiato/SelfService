/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
import { Injectable, EventEmitter, Output } from '@angular/core';
/**
 * LocaleService class.
Defines language, default locale & currency.

Instantiate this class only once in order to access the data of location from anywhere in the application.

\@author Roberto Simonetti
 */
export var LocaleService = (function () {
    function LocaleService() {
        /**
         * Output for event default locale changed.
         */
        this.defaultLocaleChanged = new EventEmitter(true);
        /**
         * Output for event current language code changed.
         */
        this.languageCodeChanged = new EventEmitter(true);
        /**
         * Output for event current country code changed.
         */
        this.countryCodeChanged = new EventEmitter(true);
        /**
         * Output for event current currency code changed.
         */
        this.currencyCodeChanged = new EventEmitter(true);
        /**
         * Output for event script code changed.
         */
        this.scriptCodeChanged = new EventEmitter(true);
        /**
         * Output for event numbering system changed.
         */
        this.numberingSystemChanged = new EventEmitter(true);
        /**
         * Output for event calendar changed.
         */
        this.calendarChanged = new EventEmitter(true);
        /**
         * Output for event update Localization.
         */
        this.updateLocalization = new EventEmitter(true);
        this.enableCookie = false;
        this.enableLocalStorage = false;
        this.languageCodes = [];
        this.languageCode = "";
        this.countryCode = "";
        this.currencyCode = "";
        this.defaultLocale = "";
        this.scriptCode = "";
        this.numberingSystem = "";
        this.calendar = "";
        // Counts the reference to the service.
        LocaleService.referenceCounter++;
        // Enables the cookies for the first instance of the service (see issue #11).
        if (LocaleService.referenceCounter == 1) {
            this.enableCookie = true;
        }
    }
    /**
     * Adds a new language.
    
    \@param language The two-letter or three-letter code of the new language
     * @param {?} language
     * @return {?}
     */
    LocaleService.prototype.addLanguage = function (language) {
        this.languageCodes.push(language);
    };
    /**
     * Adds languages.
    
    \@param languages The array of the two-letter or three-letter code of the languages
     * @param {?} languages
     * @return {?}
     */
    LocaleService.prototype.addLanguages = function (languages) {
        for (var _i = 0, languages_1 = languages; _i < languages_1.length; _i++) {
            var language = languages_1[_i];
            this.languageCodes.push(language);
        }
    };
    /**
     * Gets all available languages.
    
    \@return An array with two-letter or three-letter codes for all available languages
     * @return {?}
     */
    LocaleService.prototype.getAvailableLanguages = function () {
        return this.languageCodes;
    };
    /**
     * Sets Local Storage as default.
     * @return {?}
     */
    LocaleService.prototype.useLocalStorage = function () {
        this.enableLocalStorage = true;
    };
    /**
     * Defines the preferred language.
    Selects the current language of the browser if it has been added, else the default language.
    
    \@param defaultLanguage The two-letter or three-letter code of the default language
    \@param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
     * @param {?} defaultLanguage
     * @param {?=} expiry
     * @return {?}
     */
    LocaleService.prototype.definePreferredLanguage = function (defaultLanguage, expiry) {
        this.expiry = expiry;
        // Parses the storage "locale" to extract the codes.
        this.parseStorage("locale");
        if (this.languageCode == "") {
            this.languageCode = defaultLanguage;
            // Verifies browser language.
            var /** @type {?} */ browserLanguage = "";
            if (typeof navigator.language != "undefined") {
                browserLanguage = navigator.language;
            }
            // Tries to gets the current language of browser.
            if (browserLanguage != "") {
                var /** @type {?} */ index = browserLanguage.indexOf("-");
                if (index != -1) {
                    browserLanguage = browserLanguage.substring(0, index); // Gets the language code.
                }
                if (this.languageCodes.length > 0 && this.languageCodes.indexOf(browserLanguage) != -1) {
                    this.languageCode = browserLanguage;
                }
            }
        }
        // Sets the default locale.
        this.setDefaultLocale();
    };
    /**
     * Defines preferred languange and country, regardless of the browser language.
    
    \@param defaultLanguage The two-letter or three-letter code of the default language
    \@param defaultCountry The two-letter, uppercase code of the default country
    \@param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
    \@param script The optional four-letter script code
    \@param numberingSystem The optional numbering system to be used
    \@param calendar The optional calendar to be used
     * @param {?} defaultLanguage
     * @param {?} defaultCountry
     * @param {?=} expiry
     * @param {?=} script
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    LocaleService.prototype.definePreferredLocale = function (defaultLanguage, defaultCountry, expiry, script, numberingSystem, calendar) {
        if (script === void 0) { script = ""; }
        if (numberingSystem === void 0) { numberingSystem = ""; }
        if (calendar === void 0) { calendar = ""; }
        this.expiry = expiry;
        // Parses the storage "locale" to extract the codes & the extension.
        this.parseStorage("locale");
        if (this.languageCode == "" || this.countryCode == "") {
            this.languageCode = defaultLanguage;
            this.countryCode = defaultCountry;
            this.scriptCode = script;
            this.numberingSystem = numberingSystem;
            this.calendar = calendar;
        }
        // Sets the default locale.
        this.setDefaultLocale();
    };
    /**
     * Defines the preferred currency.
    
    \@param defaultCurrency The three-letter code of the default currency
     * @param {?} defaultCurrency
     * @return {?}
     */
    LocaleService.prototype.definePreferredCurrency = function (defaultCurrency) {
        // Parses the storage "currency" to extract the code.
        this.parseStorage("currency");
        if (this.currencyCode == "") {
            this.currencyCode = defaultCurrency;
        }
        // Sets the storage "currency".
        this.setStorage("currency", this.currencyCode);
    };
    /**
     * Gets the current language.
    
    \@return The two-letter or three-letter code of the current language
     * @return {?}
     */
    LocaleService.prototype.getCurrentLanguage = function () {
        return this.languageCode;
    };
    /**
     * Gets the current country.
    
    \@return The two-letter, uppercase code of the current country
     * @return {?}
     */
    LocaleService.prototype.getCurrentCountry = function () {
        return this.countryCode;
    };
    /**
     * Gets the current currency.
    
    \@return The three-letter code of the current currency
     * @return {?}
     */
    LocaleService.prototype.getCurrentCurrency = function () {
        return this.currencyCode;
    };
    /**
     * Gets the script.
    
    \@return The four-letter code of the script
     * @return {?}
     */
    LocaleService.prototype.getScript = function () {
        return this.scriptCode;
    };
    /**
     * Gets the numbering system.
    
    \@return The numbering system
     * @return {?}
     */
    LocaleService.prototype.getNumberingSystem = function () {
        return this.numberingSystem;
    };
    /**
     * Gets the calendar.
    
    \@return The calendar
     * @return {?}
     */
    LocaleService.prototype.getCalendar = function () {
        return this.calendar;
    };
    /**
     * Sets the current language.
    
    \@param language The two-letter or three-letter code of the new language
     * @param {?} language
     * @return {?}
     */
    LocaleService.prototype.setCurrentLanguage = function (language) {
        // Checks if the language has changed.
        if (this.languageCode != language) {
            // Assigns the value.
            this.languageCode = language;
            // Sets the default locale.
            this.setDefaultLocale();
            // Sends the events.
            this.updateLocalization.emit(null); // Event for LocalizationService.
            this.languageCodeChanged.emit(language);
        }
    };
    /**
     * Sets the current locale.
    
    \@param language The two-letter or three-letter code of the new language
    \@param country The two-letter, uppercase code of the new country
    \@param script The optional four-letter script code
    \@param numberingSystem The optional numbering system to be used
    \@param calendar The optional calendar to be used
     * @param {?} language
     * @param {?} country
     * @param {?=} script
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    LocaleService.prototype.setCurrentLocale = function (language, country, script, numberingSystem, calendar) {
        if (script === void 0) { script = ""; }
        if (numberingSystem === void 0) { numberingSystem = ""; }
        if (calendar === void 0) { calendar = ""; }
        // Checks if language, country, script or extension have changed.
        if (this.languageCode != language || this.countryCode != country || this.scriptCode != script || this.numberingSystem != numberingSystem || this.calendar != calendar) {
            // Stores the changes.
            var /** @type {?} */ changes = {};
            changes["languageCode"] = this.languageCode != language ? true : false;
            changes["countryCode"] = this.countryCode != country ? true : false;
            changes["scriptCode"] = this.scriptCode != script ? true : false;
            changes["numberingSystem"] = this.numberingSystem != numberingSystem ? true : false;
            changes["calendar"] = this.calendar != calendar ? true : false;
            // Assigns the values.
            this.languageCode = language;
            this.countryCode = country;
            this.scriptCode = script;
            this.numberingSystem = numberingSystem;
            this.calendar = calendar;
            // Sets the default locale.
            this.setDefaultLocale();
            // Sends the events.
            if (changes["languageCode"] || changes["countryCode"]) {
                this.updateLocalization.emit(null);
            } // Event for LocalizationService.
            if (changes["languageCode"]) {
                this.languageCodeChanged.emit(language);
            }
            if (changes["countryCode"]) {
                this.countryCodeChanged.emit(country);
            }
            if (changes["scriptCode"]) {
                this.scriptCodeChanged.emit(script);
            }
            if (changes["numberingSystem"]) {
                this.numberingSystemChanged.emit(numberingSystem);
            }
            if (changes["calendar"]) {
                this.calendarChanged.emit(calendar);
            }
        }
    };
    /**
     * Sets the current currency.
    
    \@param currency The three-letter code of the new currency
     * @param {?} currency
     * @return {?}
     */
    LocaleService.prototype.setCurrentCurrency = function (currency) {
        // Checks if the currency has changed.
        if (this.currencyCode != currency) {
            // Assigns the value.
            this.currencyCode = currency;
            // Sets the storage "currency".
            this.setStorage("currency", this.currencyCode);
            // Sends an event.
            this.currencyCodeChanged.emit(currency);
        }
    };
    /**
     * Gets the default locale.
    
    \@return The default locale
     * @return {?}
     */
    LocaleService.prototype.getDefaultLocale = function () {
        return this.defaultLocale;
    };
    /**
     * Builds the default locale.
     * @return {?}
     */
    LocaleService.prototype.setDefaultLocale = function () {
        this.defaultLocale = this.languageCode;
        this.defaultLocale += this.scriptCode != "" ? "-" + this.scriptCode : "";
        this.defaultLocale += this.countryCode != "" ? "-" + this.countryCode : "";
        // Adds the 'u' (Unicode) extension.
        this.defaultLocale += this.numberingSystem != "" || this.calendar != "" ? "-u" : "";
        // Adds numbering system.
        this.defaultLocale += this.numberingSystem != "" ? "-nu-" + this.numberingSystem : "";
        // Adds calendar.
        this.defaultLocale += this.calendar != "" ? "-ca-" + this.calendar : "";
        // Sets the storage "locale".
        this.setStorage("locale", this.defaultLocale);
        // Sends an event.
        this.defaultLocaleChanged.emit(this.defaultLocale);
    };
    /**
     * Parses the storage to extract the codes & the extension.
    
    \@param name The name of the storage
     * @param {?} name
     * @return {?}
     */
    LocaleService.prototype.parseStorage = function (name) {
        var /** @type {?} */ storage = "";
        if (this.enableLocalStorage && this.verifyLocalStorage) {
            storage = this.getLocalStorage(name);
        }
        else if (this.enableCookie && this.languageCodes.length > 0 && this.verifyCookie) {
            storage = this.getCookie(name);
        }
        if (storage != "") {
            // Looks for the 'u' (Unicode) extension.
            var /** @type {?} */ index = storage.search("-u");
            if (index != -1) {
                var /** @type {?} */ extensions = storage.substring(index + 1).split("-");
                switch (extensions.length) {
                    case 3:
                        if (extensions[1] == "nu") {
                            this.numberingSystem = extensions[2];
                        }
                        else if (extensions[1] == "ca") {
                            this.calendar = extensions[2];
                        }
                        break;
                    case 5:
                        this.numberingSystem = extensions[2];
                        this.calendar = extensions[4];
                        break;
                }
                // Extracts the codes.
                storage = storage.substring(0, index);
            }
            // Splits the string to each hyphen.
            var /** @type {?} */ codes = storage.split("-");
            switch (codes.length) {
                case 1:
                    if (name == "locale") {
                        this.languageCode = codes[0];
                    }
                    else if (name == "currency") {
                        this.currencyCode = codes[0];
                    }
                    break;
                case 2:
                    this.languageCode = codes[0];
                    this.countryCode = codes[1];
                    break;
                case 3:
                    this.languageCode = codes[0];
                    this.scriptCode = codes[1];
                    this.countryCode = codes[2];
                    break;
            }
        }
    };
    /**
     * Checks browser support for Local Storage.
    
    \@return True if Web Storage is supported.
     * @return {?}
     */
    LocaleService.prototype.verifyLocalStorage = function () {
        return typeof Storage != "undefined";
    };
    /**
     * Checks browser support for cookies.
    
    \@return True if cookies are supported.
     * @return {?}
     */
    LocaleService.prototype.verifyCookie = function () {
        return typeof navigator.cookieEnabled != "undefined" && navigator.cookieEnabled;
    };
    /**
     * Sets the storage.
    
    \@param name The name of the storage
    \@param value The value of the storage
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    LocaleService.prototype.setStorage = function (name, value) {
        if (this.enableLocalStorage && this.verifyLocalStorage) {
            this.setLocalStorage(name, value);
        }
        else if (this.enableCookie == true && this.languageCodes.length > 0 && this.verifyCookie) {
            this.setCookie(name, value, this.expiry);
        }
    };
    /**
     * Saves Local Storage value.
    
    \@param name The name of the storage
    \@param value The value of the storage
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    LocaleService.prototype.setLocalStorage = function (name, value) {
        localStorage.setItem(name, value);
    };
    /**
     * Saves Local Storage value.
    
    \@param name The name of the storage
    \@return The value of the storage
     * @param {?} name
     * @return {?}
     */
    LocaleService.prototype.getLocalStorage = function (name) {
        // If the storage is not found, returns an empty string.
        return localStorage.getItem(name) != null ? localStorage.getItem(name) : "";
    };
    /**
     * Sets the cookie.
    
    \@param name The name of the cookie
    \@param value The value of the cookie
    \@param days Number of days on the expiry
     * @param {?} name
     * @param {?} value
     * @param {?=} days
     * @return {?}
     */
    LocaleService.prototype.setCookie = function (name, value, days) {
        if (days != null) {
            // Adds the expiry date (in UTC time).
            var /** @type {?} */ expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() + (days * 24 * 60 * 60 * 1000));
            var /** @type {?} */ expires = "; expires=" + expirationDate.toUTCString();
        }
        else {
            // By default, the cookie is deleted when the browser is closed.
            var /** @type {?} */ expires = "";
        }
        // Creates the cookie.
        document.cookie = name + "=" + value + expires + "; path=/";
    };
    /**
     * Gets the cookie.
    
    \@param name The name of the cookie
    \@return The value of the cookie
     * @param {?} name
     * @return {?}
     */
    LocaleService.prototype.getCookie = function (name) {
        // The text to search for.
        name += "=";
        // Splits document.cookie on semicolons into an array.
        var /** @type {?} */ ca = document.cookie.split(";");
        // Loops through the ca array, and reads out each value.
        for (var /** @type {?} */ i = 0; i < ca.length; i++) {
            var /** @type {?} */ c = ca[i];
            while (c.charAt(0) == " ") {
                c = c.substring(1);
            }
            // If the cookie is found, returns the value of the cookie.
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        // If the cookie is not found, returns an empty string.
        return "";
    };
    LocaleService.referenceCounter = 0;
    LocaleService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocaleService.ctorParameters = function () { return []; };
    LocaleService.propDecorators = {
        'defaultLocaleChanged': [{ type: Output },],
        'languageCodeChanged': [{ type: Output },],
        'countryCodeChanged': [{ type: Output },],
        'currencyCodeChanged': [{ type: Output },],
        'scriptCodeChanged': [{ type: Output },],
        'numberingSystemChanged': [{ type: Output },],
        'calendarChanged': [{ type: Output },],
        'updateLocalization': [{ type: Output },],
    };
    return LocaleService;
}());
function LocaleService_tsickle_Closure_declarations() {
    /**
     * Reference counter for the service.
     * @type {?}
     */
    LocaleService.referenceCounter;
    /** @type {?} */
    LocaleService.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleService.ctorParameters;
    /** @type {?} */
    LocaleService.propDecorators;
    /**
     * Output for event default locale changed.
     * @type {?}
     */
    LocaleService.prototype.defaultLocaleChanged;
    /**
     * Output for event current language code changed.
     * @type {?}
     */
    LocaleService.prototype.languageCodeChanged;
    /**
     * Output for event current country code changed.
     * @type {?}
     */
    LocaleService.prototype.countryCodeChanged;
    /**
     * Output for event current currency code changed.
     * @type {?}
     */
    LocaleService.prototype.currencyCodeChanged;
    /**
     * Output for event script code changed.
     * @type {?}
     */
    LocaleService.prototype.scriptCodeChanged;
    /**
     * Output for event numbering system changed.
     * @type {?}
     */
    LocaleService.prototype.numberingSystemChanged;
    /**
     * Output for event calendar changed.
     * @type {?}
     */
    LocaleService.prototype.calendarChanged;
    /**
     * Output for event update Localization.
     * @type {?}
     */
    LocaleService.prototype.updateLocalization;
    /**
     * Enable/disable cookie.
     * @type {?}
     */
    LocaleService.prototype.enableCookie;
    /**
     * Enable/disable Local Storage.
     * @type {?}
     */
    LocaleService.prototype.enableLocalStorage;
    /**
     * Current language code.
     * @type {?}
     */
    LocaleService.prototype.languageCode;
    /**
     * Current country code.
     * @type {?}
     */
    LocaleService.prototype.countryCode;
    /**
     * Current currency code.
     * @type {?}
     */
    LocaleService.prototype.currencyCode;
    /**
     * Default locale.
     * @type {?}
     */
    LocaleService.prototype.defaultLocale;
    /**
     * The available language codes.
     * @type {?}
     */
    LocaleService.prototype.languageCodes;
    /**
     * Defines when the cookie will be removed.
     * @type {?}
     */
    LocaleService.prototype.expiry;
    /**
     * The optional script code.
     * @type {?}
     */
    LocaleService.prototype.scriptCode;
    /**
     * The optional numbering system.
     * @type {?}
     */
    LocaleService.prototype.numberingSystem;
    /**
     * The optional calendar.
     * @type {?}
     */
    LocaleService.prototype.calendar;
}
//# sourceMappingURL=locale.service.js.map