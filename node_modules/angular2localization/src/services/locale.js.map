{"version":3,"file":"locale.js","sourceRoot":"","sources":["../../../src/services/locale.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH;;;;;;;GAOG;AACH;IAIA;;;OAGG;IACH,gBAAmB,MAAsB,EAClC,YAAkC;QATzC,iBAmDC;QA3CkB,WAAM,GAAN,MAAM,CAAgB;QAClC,iBAAY,GAAZ,YAAY,CAAsB;QAEjC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;YAE5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;YAE3C,8EAA8E;YAC9E,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,SAAS;YAE1C,qBAAqB;YACrB,UAAC,QAAgB,IAAO,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAElD,CAAC;QAEN,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YAEtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;YAEpD,6FAA6F;YAC7F,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS;YAEtC,qBAAqB;YACrB,UAAC,aAAqB,IAAO,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC,CAAC,CAAC,CAErE,CAAC;YAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;YAEjD,kFAAkF;YAClF,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS;YAErC,qBAAqB;YACrB,UAAC,QAAgB,IAAO,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAEtD,CAAC;QAEN,CAAC;IAEL,CAAC;IAEL,aAAC;AAAD,CAAC,AAnDD,IAmDC;AAED;IACA;;;OAGG;IACH,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;IACtB;;;OAGG;IACH,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC;IAC/B;;;OAGG;IACH,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC1B,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;IACxB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC;AAC9B,CAAC","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\n// Services.\r\nimport { LocaleService } from './locale.service';\r\nimport { LocalizationService } from './localization.service';\n/**\n * Locale superclass.\rProvides the updates for localization.\r\rExtend this class in components to provide lang, defaultLocale & currency to the pipes.\r\r\\@author Roberto Simonetti\n */\nexport class Locale {\npublic lang: string;\npublic defaultLocale: string;\npublic currency: string;\n/**\n * @param {?=} locale\n * @param {?=} localization\n */\nconstructor(public locale?: LocaleService,\npublic localization?: LocalizationService) {\r\n\r\n        if (this.localization != null) {\r\n\r\n            this.lang = this.localization.languageCode;\r\n\r\n            // When the language changes, subscribes to the event & updates lang property.\r\n            this.localization.translationChanged.subscribe(\r\n\r\n                // Generator or next.\r\n                (language: string) => { this.lang = language; }\r\n\r\n            );\r\n\r\n        }\r\n\r\n        if (this.locale != null) {\r\n\r\n            this.defaultLocale = this.locale.getDefaultLocale();\r\n\r\n            // When the default locale changes, subscribes to the event & updates defaultLocale property.\r\n            this.locale.defaultLocaleChanged.subscribe(\r\n\r\n                // Generator or next.\r\n                (defaultLocale: string) => { this.defaultLocale = defaultLocale; }\r\n\r\n            );\r\n\r\n            this.currency = this.locale.getCurrentCurrency();\r\n\r\n            // When the currency changes, subscribes to the event & updates currency property.\r\n            this.locale.currencyCodeChanged.subscribe(\r\n\r\n                // Generator or next.\r\n                (currency: string) => { this.currency = currency; }\r\n\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\n\nfunction Locale_tsickle_Closure_declarations() {\n/**\n * Language code of the LocalizationService.\n * @type {?}\n */\nLocale.prototype.lang;\n/**\n * The default locale.\n * @type {?}\n */\nLocale.prototype.defaultLocale;\n/**\n * The current currency.\n * @type {?}\n */\nLocale.prototype.currency;\n/** @type {?} */\nLocale.prototype.locale;\n/** @type {?} */\nLocale.prototype.localization;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}