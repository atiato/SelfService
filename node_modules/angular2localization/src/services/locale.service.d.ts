/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
import { EventEmitter } from '@angular/core';
/**
 * LocaleService class.
 * Defines language, default locale & currency.
 *
 * Instantiate this class only once in order to access the data of location from anywhere in the application.
 *
 * @author Roberto Simonetti
 */
export declare class LocaleService {
    /**
     * Reference counter for the service.
     */
    private static referenceCounter;
    /**
     * Output for event default locale changed.
     */
    defaultLocaleChanged: EventEmitter<string>;
    /**
     * Output for event current language code changed.
     */
    languageCodeChanged: EventEmitter<string>;
    /**
     * Output for event current country code changed.
     */
    countryCodeChanged: EventEmitter<string>;
    /**
     * Output for event current currency code changed.
     */
    currencyCodeChanged: EventEmitter<string>;
    /**
     * Output for event script code changed.
     */
    scriptCodeChanged: EventEmitter<string>;
    /**
     * Output for event numbering system changed.
     */
    numberingSystemChanged: EventEmitter<string>;
    /**
     * Output for event calendar changed.
     */
    calendarChanged: EventEmitter<string>;
    /**
     * Output for event update Localization.
     */
    updateLocalization: EventEmitter<any>;
    /**
     * Enable/disable cookie.
     */
    enableCookie: boolean;
    /**
     * Enable/disable Local Storage.
     */
    enableLocalStorage: boolean;
    /**
     * Current language code.
     */
    private languageCode;
    /**
     * Current country code.
     */
    private countryCode;
    /**
     * Current currency code.
     */
    private currencyCode;
    /**
     * Default locale.
     */
    private defaultLocale;
    /**
     * The available language codes.
     */
    private languageCodes;
    /**
     * Defines when the cookie will be removed.
     */
    private expiry;
    /**
     * The optional script code.
     */
    private scriptCode;
    /**
     * The optional numbering system.
     */
    private numberingSystem;
    /**
     * The optional calendar.
     */
    private calendar;
    constructor();
    /**
     * Adds a new language.
     *
     * @param language The two-letter or three-letter code of the new language
     */
    addLanguage(language: string): void;
    /**
     * Adds languages.
     *
     * @param languages The array of the two-letter or three-letter code of the languages
     */
    addLanguages(languages: Array<string>): void;
    /**
     * Gets all available languages.
     *
     * @return An array with two-letter or three-letter codes for all available languages
     */
    getAvailableLanguages(): Array<string>;
    /**
     * Sets Local Storage as default.
     */
    useLocalStorage(): void;
    /**
     * Defines the preferred language.
     * Selects the current language of the browser if it has been added, else the default language.
     *
     * @param defaultLanguage The two-letter or three-letter code of the default language
     * @param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
     */
    definePreferredLanguage(defaultLanguage: string, expiry?: number): void;
    /**
     * Defines preferred languange and country, regardless of the browser language.
     *
     * @param defaultLanguage The two-letter or three-letter code of the default language
     * @param defaultCountry The two-letter, uppercase code of the default country
     * @param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
     * @param script The optional four-letter script code
     * @param numberingSystem The optional numbering system to be used
     * @param calendar The optional calendar to be used
     */
    definePreferredLocale(defaultLanguage: string, defaultCountry: string, expiry?: number, script?: string, numberingSystem?: string, calendar?: string): void;
    /**
     * Defines the preferred currency.
     *
     * @param defaultCurrency The three-letter code of the default currency
     */
    definePreferredCurrency(defaultCurrency: string): void;
    /**
     * Gets the current language.
     *
     * @return The two-letter or three-letter code of the current language
     */
    getCurrentLanguage(): string;
    /**
     * Gets the current country.
     *
     * @return The two-letter, uppercase code of the current country
     */
    getCurrentCountry(): string;
    /**
     * Gets the current currency.
     *
     * @return The three-letter code of the current currency
     */
    getCurrentCurrency(): string;
    /**
     * Gets the script.
     *
     * @return The four-letter code of the script
     */
    getScript(): string;
    /**
     * Gets the numbering system.
     *
     * @return The numbering system
     */
    getNumberingSystem(): string;
    /**
     * Gets the calendar.
     *
     * @return The calendar
     */
    getCalendar(): string;
    /**
     * Sets the current language.
     *
     * @param language The two-letter or three-letter code of the new language
     */
    setCurrentLanguage(language: string): void;
    /**
     * Sets the current locale.
     *
     * @param language The two-letter or three-letter code of the new language
     * @param country The two-letter, uppercase code of the new country
     * @param script The optional four-letter script code
     * @param numberingSystem The optional numbering system to be used
     * @param calendar The optional calendar to be used
     */
    setCurrentLocale(language: string, country: string, script?: string, numberingSystem?: string, calendar?: string): void;
    /**
     * Sets the current currency.
     *
     * @param currency The three-letter code of the new currency
     */
    setCurrentCurrency(currency: string): void;
    /**
     * Gets the default locale.
     *
     * @return The default locale
     */
    getDefaultLocale(): string;
    /**
     * Builds the default locale.
     */
    private setDefaultLocale();
    /**
     * Parses the storage to extract the codes & the extension.
     *
     * @param name The name of the storage
     */
    private parseStorage(name);
    /**
     * Checks browser support for Local Storage.
     *
     * @return True if Web Storage is supported.
     */
    private verifyLocalStorage();
    /**
     * Checks browser support for cookies.
     *
     * @return True if cookies are supported.
     */
    private verifyCookie();
    /**
     * Sets the storage.
     *
     * @param name The name of the storage
     * @param value The value of the storage
     */
    private setStorage(name, value);
    /**
     * Saves Local Storage value.
     *
     * @param name The name of the storage
     * @param value The value of the storage
     */
    private setLocalStorage(name, value);
    /**
     * Saves Local Storage value.
     *
     * @param name The name of the storage
     * @return The value of the storage
     */
    private getLocalStorage(name);
    /**
     * Sets the cookie.
     *
     * @param name The name of the cookie
     * @param value The value of the cookie
     * @param days Number of days on the expiry
     */
    private setCookie(name, value, days?);
    /**
     * Gets the cookie.
     *
     * @param name The name of the cookie
     * @return The value of the cookie
     */
    private getCookie(name);
}
