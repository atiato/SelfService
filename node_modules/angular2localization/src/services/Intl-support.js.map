{"version":3,"file":"Intl-support.js","sourceRoot":"","sources":["../../../src/services/Intl-support.ts"],"names":[],"mappings":"AACA;;;;;GAKG;AACH;IAAA;IA+EA,CAAC;IA9ED;;;;;;;OAOG;IACW,0BAAc,GAA5B,UAA6B,aAAqB;QAE1C,wBAAwB;QACxB,IAAI,CAAC;YAED,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QAE9D,CAAE;QAAA,KAAK,CAAC,CAAkB,CAAC,CAAC,CAAC,CAAC;YAE1B,MAAM,CAAC,KAAK,CAAC;QAEjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAEhB,CAAC;IACL;;;;;;;OAOG;IACW,wBAAY,GAA1B,UAA2B,aAAqB;QAExC,wBAAwB;QACxB,IAAI,CAAC;YAED,IAAI,gBAAgB,CAAC,CAAC,GAAW,CAAC,CAAC;YAEnC,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEnD,CAAE;QAAA,KAAK,CAAC,CAAkB,CAAC,CAAC,CAAC,CAAC;YAE1B,MAAM,CAAC,KAAK,CAAC;QAEjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAEhB,CAAC;IACL;;;;;;;OAOG;IACW,oBAAQ,GAAtB,UAAuB,IAAY;QAE3B,wBAAwB;QACxB,IAAI,CAAC;YAED,IAAI,gBAAgB,CAAC,MAAM,GAAW,GAAG,CAAC;YAC1C,IAAI,gBAAgB,CAAC,MAAM,GAAW,GAAG,CAAC;YAE1C,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAEpD,CAAE;QAAA,KAAK,CAAC,CAAkB,CAAC,CAAC,CAAC,CAAC;YAE1B,MAAM,CAAC,KAAK,CAAC;QAEjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAEhB,CAAC;IAEL,kBAAC;AAAD,CAAC,AA/ED,IA+EC","sourcesContent":["\n/**\n * IntlSupport class.\rProvides the methods to check if Intl is supported.\r\r\\@author Roberto Simonetti\n */\nexport class IntlSupport {\n/**\n * Support for dates.\r\r\\@param defaultLocale The default locale\r\\@return True if the browser supports locales for dates, otherwise false.\n * @param {?} defaultLocale\n * @return {?}\n */\npublic static DateTimeFormat(defaultLocale: string): boolean {\r\n\r\n        // Checking for support.\r\n        try {\r\n\r\n            new Intl.DateTimeFormat(defaultLocale).format(new Date());\r\n\r\n        } catch ( /** @type {?} */e) {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\n/**\n * Support for numbers.\r\r\\@param defaultLocale The default locale\r\\@return True if the browser supports locales for numbers, otherwise false.\n * @param {?} defaultLocale\n * @return {?}\n */\npublic static NumberFormat(defaultLocale: string): boolean {\r\n\r\n        // Checking for support.\r\n        try {\r\n\r\n            var /** @type {?} */ n: number = 0;\r\n\r\n            new Intl.NumberFormat(defaultLocale).format(n);\r\n\r\n        } catch ( /** @type {?} */e) {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\n/**\n * Support for Collator.\r\r\\@param lang The current language code\r\\@return True if the browser supports Collator, otherwise false.\n * @param {?} lang\n * @return {?}\n */\npublic static Collator(lang: string): boolean {\r\n\r\n        // Checking for support.\r\n        try {\r\n\r\n            var /** @type {?} */ value1: string = \"a\";\r\n            var /** @type {?} */ value2: string = \"b\";\r\n\r\n            new Intl.Collator(lang).compare(value1, value2);\r\n\r\n        } catch ( /** @type {?} */e) {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}