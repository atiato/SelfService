/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
import { EventEmitter } from '@angular/core';
import { Http } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/merge';
import { LocaleService } from './locale.service';
/**
 * LocalizationService class.
 * Gets the translation data and performs operations.
 *
 * @author Roberto Simonetti
 */
export declare class LocalizationService {
    http: Http;
    locale: LocaleService;
    /**
     * Output for event translation changed.
     */
    translationChanged: EventEmitter<string>;
    /**
     * The language code for the service.
     */
    languageCode: string;
    /**
     * The loading mode for the service.
     */
    loadingMode: LoadingMode;
    /**
     * The service state.
     */
    serviceState: ServiceState;
    /**
     * Enable/disable locale as language.
     */
    enableLocale: boolean;
    /**
     * The providers for the asynchronous loading.
     */
    private providers;
    /**
     * The translation data: {languageCode: {key: value}}.
     */
    private translationData;
    /**
     * Value for missing keys.
     */
    private missingValue;
    /**
     * Key for missing keys.
     */
    private missingKey;
    /**
     * Option for composed key.
     */
    private composedKey;
    /**
     * Separator for composed key.
     */
    private keySeparator;
    constructor(http: Http, locale: LocaleService);
    /**
     * Direct loading: adds new translation data.
     *
     * @param language The two-letter code of the language for the translation data
     * @param translation The new translation data
     */
    addTranslation(language: string, translation: any): void;
    /**
     * Asynchronous loading: defines the translation provider.
     *
     * @param prefix The path prefix of the json files
     * @param dataFormat Data format: default value is 'json'.
     * @param webAPI True if the asynchronous loading uses a Web API to get the data.
     */
    translationProvider(prefix: string, dataFormat?: string, webAPI?: boolean): void;
    /**
     * Asynchronous loading: adds a translation provider.
     *
     * @param prefix The path prefix of the json files
     * @param dataFormat Data format: default value is 'json'.
     * @param webAPI True if the asynchronous loading uses a Web API to get the data.
     */
    addProvider(prefix: string, dataFormat?: string, webAPI?: boolean): void;
    /**
     * Translates a key.
     *
     * @param key The key to be translated
     * @param args Parameters
     * @param lang The current language
     * @return The value of translation
     */
    translate(key: string, args?: any, lang?: string): string;
    /**
     * Translates a key.
     *
     * @param key The key to be translated
     * @param args Parameters
     * @param lang The current language
     * @return An observable of the value of translation
     */
    translateAsync(key: string, args?: any, lang?: string): Observable<string>;
    /**
     * Sets the use of locale as language for the service (see issue #24).
     */
    useLocaleAsLanguage(): void;
    /**
     * Gets language code and loads the translation data for the asynchronous loading.
     *
     * @param language The language for the service
     */
    updateTranslation(language?: string): void;
    /**
     * Sets the value to use for missing keys.
     *
     * @param value The value to use for missing keys
     */
    setMissingValue(value: string): void;
    /**
     * Sets the key to use for missing keys.
     *
     * @param key The key to use for missing keys
     */
    setMissingKey(key: string): void;
    /**
     * Sets composed key option.
     *
     * @param composedKey False to disable composed key. Default is true
     * @param keySeparator Composed key separator. Default is the point '.'
     */
    setComposedKey(composedKey?: boolean, keySeparator?: string): void;
    /**
     * Compares two keys by the value of translation & the current language code.
     *
     * @param key1, key2 The keys of the values to compare
     * @param extension
     * @param options
     * @return A negative value if the value of translation of key1 comes before the value of translation of key2; a positive value if key1 comes after key2; 0 if they are considered equal or Intl.Collator is not supported
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     */
    compare(key1: string, key2: string, extension?: string, options?: any): number;
    /**
     * Sorts an array of objects or an array of arrays by the current language code.
     *
     * @param list The array to be sorted
     * @param keyName The column that contains the keys of the values to be ordered
     * @param order 'asc' or 'desc'. The default value is 'asc'.
     * @param extension
     * @param options
     * @return The same sorted list or the same list if Intl.Collator is not supported
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     */
    sort(list: Array<any>, keyName: any, order?: string, extension?: string, options?: any): Array<any>;
    /**
     * Sorts an array of objects or an array of arrays by the current language code.
     *
     * @param list The array to be sorted
     * @param keyName The column that contains the keys of the values to be ordered
     * @param order 'asc' or 'desc'. The default value is 'asc'.
     * @param extension
     * @param options
     * @return An observable of the sorted list or of the same list if Intl.Collator is not supported
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     */
    sortAsync(list: Array<any>, keyName: any, order?: string, extension?: string, options?: any): Observable<Array<any>>;
    /**
     * Matches a string into an array of objects or an array of arrays.
     *
     * @param s The string to search
     * @param list The array to look for
     * @param keyNames An array that contains the columns to look for
     * @param options
     * @return A filtered list or the same list if Intl.Collator is not supported
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     */
    search(s: string, list: Array<any>, keyNames: any[], options?: any): Array<any>;
    /**
     * Matches a string into an array of objects or an array of arrays.
     *
     * @param s The string to search
     * @param list The array to look for
     * @param keyNames An array that contains the columns to look for
     * @param options
     * @return An observable for each element of the filtered list or the same list if Intl.Collator is not supported
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     */
    searchAsync(s: string, list: Array<any>, keyNames: any[], options?: any): Observable<any>;
    private addExtension(locale, extension?);
    /**
     * Matching algorithm.
     *
     * @param v The value
     * @param s The string to search
     * @return True if match, otherwise false
     */
    private match(v, s, collator);
    /**
     * Asynchronous loading: gets translation data.
     */
    private getTranslation(language);
    private getTranslationByProvider(url);
    /**
     * Adds or extends translation data.
     */
    private addData(data, language);
    /**
     * Merges objects.
     */
    private extend(...args);
    private translationComplete(language);
}
/**
 * Defines the service state.
 */
export declare enum ServiceState {
    /**
     * The translation data has been loaded.
     */
    isReady = 0,
    /**
     * The service is loading the data.
     */
    isLoading = 1,
    /**
     * The service is waiting for the data.
     */
    isWaiting = 2,
}
/**
 * Defines the loading mode.
 */
export declare enum LoadingMode {
    /**
     * Direct loading.
     */
    Direct = 0,
    /**
     * Asynchronous loading.
     */
    Async = 1,
}
