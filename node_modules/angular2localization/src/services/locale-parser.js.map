{"version":3,"file":"locale-parser.js","sourceRoot":"","sources":["../../../src/services/locale-parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\n// Services.\r\nimport { IntlSupport } from './Intl-support';\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isPresent(obj: any): boolean {\r\n\r\n    return obj !== undefined && obj !== null;\r\n\r\n}\n/**\n * LocaleParser class.\rParses a string and returns a number by default locale.\r\r\\@author Roberto Simonetti\n */\nexport class LocaleParser {\n/**\n * Builds the regular expression for a number by default locale.\r\r\\@param defaultLocale The default locale\r\\@param digits The digit info: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\r\\@return A RegExp object\n * @param {?} defaultLocale\n * @param {?} digits\n * @return {?}\n */\npublic static NumberRegExpFactory(defaultLocale: string, digits: string): RegExp {\r\n\r\n        // Gets digits.\r\n        let /** @type {?} */ minInt: number = 1;\r\n        let /** @type {?} */ minFraction: number = 0;\r\n        let /** @type {?} */ maxFraction: number = 3;\r\n\r\n        const /** @type {?} */ NUMBER_FORMAT_REGEXP: RegExp = /^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$/;\r\n\r\n        if (isPresent(digits)) {\r\n\r\n            var /** @type {?} */ parts: RegExpMatchArray = digits.match(NUMBER_FORMAT_REGEXP);\r\n\r\n            if (parts === null) {\r\n                throw new Error(`${digits} is not a valid digit info for number`);\r\n            }\r\n            if (isPresent(parts[1])) {  // Min integer digits.\r\n                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\r\n            }\r\n            if (isPresent(parts[3])) {  // Min fraction digits.\r\n                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\r\n            }\r\n            if (isPresent(parts[5])) {  // Max fraction digits.\r\n                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\r\n            }\r\n        }\r\n\r\n        // Converts numbers & signs to Unicode by default locale.\r\n        var /** @type {?} */ codes: DecimalCode = new DecimalCode(defaultLocale);\r\n\r\n        var /** @type {?} */ minusSign: string = codes.minusSign;\r\n        var /** @type {?} */ zero: string = codes.numbers[0];\r\n        var /** @type {?} */ decimalSeparator: string = codes.decimalSeparator;\r\n        var /** @type {?} */ nine: string = codes.numbers[9];\r\n\r\n        // Pattern for 1.2-2 digits: /^-?[0-9]{1,}\\.[0-9]{2,2}$/\r\n        // Unicode pattern = \"^\\u002d?[\\u0030-\\u0039]{1,}\\\\u002e[\\u0030-\\u0039]{2,2}$\";\r\n        var /** @type {?} */ pattern: string;\r\n        if (minFraction > 0 && maxFraction > 0) {\r\n\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n\r\n        } else if (minFraction == 0 && maxFraction > 0) {\r\n\r\n            // Decimal separator is optional.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n\r\n        } else {\r\n\r\n            // Integer number.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minInt + \",}$\";\r\n\r\n        }\r\n        pattern = codes.UnicodeToChar(pattern);\r\n        var /** @type {?} */ regExp: RegExp = new RegExp(pattern);\r\n\r\n        return regExp;\r\n\r\n        // Wonderful, it works!\r\n    }\n/**\n * Parses a string and returns a number by default locale.\r\r\\@param s The string to be parsed\r\\@param defaultLocale The default locale\r\\@return A number. If the string cannot be converted to a number, returns NaN\n * @param {?} s\n * @param {?} defaultLocale\n * @return {?}\n */\npublic static Number(s: string, defaultLocale: string): number {\r\n\r\n        if (s == \"\" || defaultLocale == \"\" || defaultLocale == null) { return null; }\r\n\r\n        var /** @type {?} */ codes: DecimalCode = new DecimalCode(defaultLocale);\r\n\r\n        return codes.parse(s);\r\n\r\n    }\r\n\r\n}\n/**\n * NumberCode abstract superclass.\r\rConverts numbers to Unicode by locales.\r\r\\@author Roberto Simonetti\n * @abstract\n */\nexport abstract class NumberCode {\npublic numbers: Array<string> = [];\n/**\n * @param {?} defaultLocale\n */\nconstructor(public defaultLocale: string) {\r\n\r\n        for (var i: number = 0; i <= 9; i++) {\r\n\r\n            this.numbers.push(this.Unicode(i.toString()));\r\n\r\n        }\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            // Updates Unicode for numbers by default locale.\r\n            for (var i: number = 0; i <= 9; i++) {\r\n\r\n                this.numbers[i] = this.Unicode(new Intl.NumberFormat(defaultLocale).format(i));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\n/**\n * Parses a string and returns a number by default locale.\r\r\\@param s The string to be parsed\r\\@return A number\n * @abstract\n * @param {?} s\n * @return {?}\n */\nparse(s: string) {}\n/**\n * @abstract\n * @param {?} pattern\n * @return {?}\n */\nUnicodeToChar(pattern: string) {}\n/**\n * @param {?} c\n * @return {?}\n */\nprotected Unicode(c: string): string {\r\n\r\n        return \"\\\\u\" + this.HexEncode(c.charCodeAt(0));\r\n\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nprotected HexEncode(value: number): string {\r\n\r\n        var /** @type {?} */ hex: string = value.toString(16).toUpperCase();\r\n        // With padding.\r\n        hex = \"0000\".substr(0, 4 - hex.length) + hex;\r\n\r\n        return hex;\r\n\r\n    }\r\n\r\n}\n\nfunction NumberCode_tsickle_Closure_declarations() {\n/**\n * Unicode for numbers from 0 to 9.\n * @type {?}\n */\nNumberCode.prototype.numbers;\n/** @type {?} */\nNumberCode.prototype.defaultLocale;\n}\n\n/**\n * DecimalCode class.\r\rConverts numbers & signs to Unicode by locales.\r\r\\@author Roberto Simonetti\n */\nclass DecimalCode extends NumberCode {\npublic minusSign: string;\npublic decimalSeparator: string;\n/**\n * @param {?} defaultLocale\n */\nconstructor(public defaultLocale: string) {\r\n        super(defaultLocale);\r\n\r\n        this.minusSign = this.Unicode(\"-\");\r\n        this.decimalSeparator = this.Unicode(\".\");\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.NumberFormat(defaultLocale) == true) {\r\n\r\n            // Updates Unicode for signs by default locale.\r\n            var value: number = -0.9; // Reference value.\r\n\r\n            var localeValue: string = new Intl.NumberFormat(defaultLocale).format(value);\r\n\r\n            // Checks Unicode character 'RIGHT-TO-LEFT MARK' (U+200F).\r\n            if (this.Unicode(localeValue.charAt(0)) == \"\\\\u200F\") {\r\n\r\n                // Right to left.\r\n                this.minusSign = this.Unicode(localeValue.charAt(1));\r\n                this.decimalSeparator = this.Unicode(localeValue.charAt(3));\r\n\r\n            } else if (this.Unicode(localeValue.charAt(0)) == this.Unicode(new Intl.NumberFormat(defaultLocale).format(0))) {\r\n\r\n                // IE & Edge reverse the order.\r\n                this.minusSign = this.Unicode(localeValue.charAt(3));\r\n                this.decimalSeparator = this.Unicode(localeValue.charAt(1));\r\n\r\n            } else {\r\n\r\n                // Left to right.\r\n                this.minusSign = this.Unicode(localeValue.charAt(0));\r\n                this.decimalSeparator = this.Unicode(localeValue.charAt(2));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\n/**\n * @param {?} s\n * @return {?}\n */\npublic parse(s: string): number {\r\n\r\n        // Splits the String object into an array of characters.\r\n        var /** @type {?} */ characters: Array<string> = s.split(\"\");\r\n\r\n        // Builds the value.\r\n        var /** @type {?} */ value: string = \"\";\r\n\r\n        for (let /** @type {?} */ char of characters) {\r\n\r\n            var /** @type {?} */ charCode: string = this.Unicode(char);\r\n\r\n            // Tries to look for the char code in numbers and signs.\r\n            var /** @type {?} */ index: number = this.numbers.indexOf(charCode);\r\n            if (index != -1) {\r\n\r\n                value += index;\r\n\r\n            } else if (charCode == this.minusSign) {\r\n\r\n                value += \"-\";\r\n\r\n            } else if (charCode == this.decimalSeparator) {\r\n\r\n                value += \".\";\r\n\r\n            } else { return NaN; }\r\n\r\n        }\r\n\r\n        return parseFloat(value);\r\n\r\n    }\n/**\n * @param {?} pattern\n * @return {?}\n */\npublic UnicodeToChar(pattern: string): string {\r\n\r\n        return pattern.replace(/\\\\u[\\dA-F]{4}/gi, (match: string) => {\r\n\r\n            return String.fromCharCode(parseInt(match.replace(/\\\\u/g, \"\"), 16));\r\n\r\n        });\r\n\r\n    }\r\n\r\n}\n\nfunction DecimalCode_tsickle_Closure_declarations() {\n/**\n * Unicode for minus sign.\n * @type {?}\n */\nDecimalCode.prototype.minusSign;\n/**\n * Unicode for decimal separator.\n * @type {?}\n */\nDecimalCode.prototype.decimalSeparator;\n/** @type {?} */\nDecimalCode.prototype.defaultLocale;\n}\n\nclass NumberWrapper {\n/**\n * @param {?} text\n * @return {?}\n */\nstatic parseIntAutoRadix(text: string): number {\r\n\r\n        var /** @type {?} */ result: number = parseInt(text, null);\r\n\r\n        if (isNaN(result)) {\r\n            throw new Error('Invalid integer literal when parsing ' + text);\r\n        }\r\n\r\n        return result;\r\n\r\n    }\n/**\n * @param {?} text\n * @param {?} radix\n * @return {?}\n */\nstatic parseInt(text: string, radix: number): number {\r\n\r\n        if (radix == 10) {\r\n\r\n            if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\r\n                return parseInt(text, radix);\r\n            }\r\n\r\n        } else if (radix == 16) {\r\n\r\n            if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\r\n                return parseInt(text, radix);\r\n            }\r\n\r\n        } else {\r\n\r\n            var /** @type {?} */ result: number = parseInt(text, radix);\r\n\r\n            if (!isNaN(result)) {\r\n                return result;\r\n            }\r\n\r\n        }\r\n        throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\r\n\r\n    }\r\n\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}