{"version":3,"file":"localization.service.js","sourceRoot":"","sources":["../../../src/services/localization.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ANGULAR 2 LOCALIZATION\r\n * An Angular 2 library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular2localization\r\n */\r\n\r\nimport { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/observable/merge';\r\n\r\n// Services.\r\nimport { LocaleService } from './locale.service';\r\nimport { IntlSupport } from './Intl-support';\n/**\n * LocalizationService class.\rGets the translation data and performs operations.\r\r\\@author Roberto Simonetti\n */\nexport class LocalizationService {\r\n\r\n    /**\r\n     * Output for event translation changed.\r\n     */\r\n     translationChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic languageCode: string;\npublic loadingMode: LoadingMode;\npublic serviceState: ServiceState;\npublic enableLocale: boolean = false;\nprivate providers: Array<Provider> = [];\nprivate translationData: any = {};\nprivate missingValue: string;\nprivate missingKey: string;\nprivate composedKey: boolean = true;\nprivate keySeparator: string = \".\";\n/**\n * @param {?} http\n * @param {?} locale\n */\nconstructor(public http: Http,\npublic locale: LocaleService) {\r\n\r\n        this.languageCode = \"\";\r\n\r\n        // Initializes the loading mode.\r\n        this.loadingMode = LoadingMode.Direct;\r\n\r\n        // Initializes the service state.\r\n        this.serviceState = ServiceState.isWaiting;\r\n\r\n        // When the language changes, subscribes to the event & call updateTranslation method.\r\n        this.locale.updateLocalization.subscribe(\r\n\r\n            // Generator or next.\r\n            () => this.updateTranslation()\r\n\r\n        );\r\n\r\n    }\n/**\n * Direct loading: adds new translation data.\r\r\\@param language The two-letter code of the language for the translation data\r\\@param translation The new translation data\n * @param {?} language\n * @param {?} translation\n * @return {?}\n */\npublic addTranslation(language: string, translation: any): void {\r\n\r\n        // Adds the new translation data.\r\n        this.addData(translation, language);\r\n\r\n    }\n/**\n * Asynchronous loading: defines the translation provider.\r\r\\@param prefix The path prefix of the json files\r\\@param dataFormat Data format: default value is 'json'.\r\\@param webAPI True if the asynchronous loading uses a Web API to get the data.\n * @param {?} prefix\n * @param {?=} dataFormat\n * @param {?=} webAPI\n * @return {?}\n */\npublic translationProvider(prefix: string, dataFormat: string = \"json\", webAPI: boolean = false): void {\r\n\r\n        this.addProvider(prefix, dataFormat, webAPI);\r\n\r\n    }\n/**\n * Asynchronous loading: adds a translation provider.\r\r\\@param prefix The path prefix of the json files\r\\@param dataFormat Data format: default value is 'json'.\r\\@param webAPI True if the asynchronous loading uses a Web API to get the data.\n * @param {?} prefix\n * @param {?=} dataFormat\n * @param {?=} webAPI\n * @return {?}\n */\npublic addProvider(prefix: string, dataFormat: string = \"json\", webAPI: boolean = false): void {\r\n\r\n        this.providers.push({ prefix, dataFormat, webAPI });\r\n\r\n        // Updates the loading mode.\r\n        if (this.providers.length == 1) { this.loadingMode = LoadingMode.Async; }\r\n\r\n    }\n/**\n * Translates a key.\r\r\\@param key The key to be translated\r\\@param args Parameters\r\\@param lang The current language\r\\@return The value of translation\n * @param {?} key\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translate(key: string, args?: any, lang: string = this.languageCode): string {\r\n\r\n        var /** @type {?} */ value: string;\r\n\r\n        if (this.translationData[lang] != null) {\r\n\r\n            // Gets the translation by language code. \r\n            var /** @type {?} */ translation: any = this.translationData[lang];\r\n\r\n            // Checks for composed key (see issue #21).\r\n            if (this.composedKey) {\r\n                var /** @type {?} */ keys: string[] = key.split(this.keySeparator);\r\n                do {\r\n                    key = keys.shift();\r\n                    if (translation[key] != null && (typeof translation[key] == \"object\")) {\r\n                        translation = translation[key];\r\n                    }\r\n                } while (keys.length > 0);\r\n            }\r\n\r\n            // Gets the value of translation by key.   \r\n            value = translation[key];\r\n\r\n        }\r\n\r\n        // Handles missing keys (see issues #1 & #31).\r\n        if (value == null || value == \"\") {\r\n\r\n            if (this.missingKey) {\r\n\r\n                return this.translate(this.missingKey, args, lang);\r\n\r\n            } else if (this.missingValue) {\r\n\r\n                return this.missingValue;\r\n\r\n            }\r\n\r\n            return key; // The same key is returned.\r\n\r\n        } else if (args != null) { // Parameters (see issue #19).\r\n\r\n            const /** @type {?} */ TEMPLATE_REGEXP: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n\r\n            return value.replace(TEMPLATE_REGEXP, (substring: string, parsedKey: string) => {\r\n                var /** @type {?} */ response: string = /** @type {?} */(( <string>args[parsedKey]));\r\n                return (typeof response !== 'undefined') ? response : substring;\r\n            });\r\n\r\n        }\r\n\r\n        return value;\r\n\r\n    }\n/**\n * Translates a key.\r\r\\@param key The key to be translated\r\\@param args Parameters\r\\@param lang The current language\r\\@return An observable of the value of translation\n * @param {?} key\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translateAsync(key: string, args?: any, lang: string = this.languageCode): Observable<string> {\r\n\r\n        return Observable.create((observer: Observer<string>) => {\r\n\r\n            // Gets the value of translation for the key.\r\n            var /** @type {?} */ value: string = this.translate(key, args, lang);\r\n\r\n            observer.next(value);\r\n            observer.complete();\r\n\r\n        });\r\n\r\n    }\n/**\n * Sets the use of locale as language for the service (see issue #24).\n * @return {?}\n */\npublic useLocaleAsLanguage(): void {\r\n\r\n        this.enableLocale = true;\r\n\r\n    }\n/**\n * Gets language code and loads the translation data for the asynchronous loading.\r\r\\@param language The language for the service\n * @param {?=} language\n * @return {?}\n */\npublic updateTranslation(language: string = !this.enableLocale\r\n        ? this.locale.getCurrentLanguage()\r\n        : this.locale.getCurrentLanguage()\r\n        + \"-\"\r\n        + this.locale.getCurrentCountry()): void {\r\n\r\n        if (language != \"\" && language != this.languageCode) {\r\n\r\n            // Asynchronous loading.\r\n            if (this.loadingMode == LoadingMode.Async) {\r\n\r\n                // Updates the translation data.  \r\n                this.getTranslation(language);\r\n\r\n            } else {\r\n\r\n                this.translationComplete(language);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\n/**\n * Sets the value to use for missing keys.\r\r\\@param value The value to use for missing keys\n * @param {?} value\n * @return {?}\n */\npublic setMissingValue(value: string): void {\r\n\r\n        this.missingValue = value;\r\n\r\n    }\n/**\n * Sets the key to use for missing keys.\r\r\\@param key The key to use for missing keys\n * @param {?} key\n * @return {?}\n */\npublic setMissingKey(key: string): void {\r\n\r\n        this.missingKey = key;\r\n\r\n    }\n/**\n * Sets composed key option.\r\r\\@param composedKey False to disable composed key. Default is true\r\\@param keySeparator Composed key separator. Default is the point '.'\n * @param {?=} composedKey\n * @param {?=} keySeparator\n * @return {?}\n */\npublic setComposedKey(composedKey?: boolean, keySeparator?: string): void {\r\n\r\n        this.composedKey = composedKey;\r\n        this.keySeparator = keySeparator;\r\n\r\n    }\n/**\n * Compares two keys by the value of translation & the current language code.\r\r\\@param key1, key2 The keys of the values to compare\r\\@param extension\r\\@param options\r\\@return A negative value if the value of translation of key1 comes before the value of translation of key2; a positive value if key1 comes after key2; 0 if they are considered equal or Intl.Collator is not supported\r\\@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} key1\n * @param {?} key2\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic compare(key1: string, key2: string, extension?: string, options?: any): number {\r\n\r\n        // Checks for support for Intl.\r\n        if (IntlSupport.Collator(this.locale.getCurrentLanguage()) == false) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n        // Gets the value of translation for the keys.\r\n        var /** @type {?} */ value1: string = this.translate(key1);\r\n        var /** @type {?} */ value2: string = this.translate(key2);\r\n\r\n        var /** @type {?} */ locale: string = this.addExtension(this.locale.getCurrentLanguage(), extension);\r\n\r\n        return new Intl.Collator(locale).compare(value1, value2);\r\n\r\n    }\n/**\n * Sorts an array of objects or an array of arrays by the current language code.\r\r\\@param list The array to be sorted\r\\@param keyName The column that contains the keys of the values to be ordered\r\\@param order 'asc' or 'desc'. The default value is 'asc'.\r\\@param extension\r\\@param options\r\\@return The same sorted list or the same list if Intl.Collator is not supported\r\\@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} list\n * @param {?} keyName\n * @param {?=} order\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic sort(list: Array<any>, keyName: any, order?: string, extension?: string, options?: any): Array<any> {\r\n\r\n        if (list == null || keyName == null || IntlSupport.Collator(this.locale.getCurrentLanguage()) == false) { return list; }\r\n\r\n        // Gets the value of translation for the keys.\r\n        for (let /** @type {?} */ item of list) {\r\n\r\n            // Gets the value of translation for the key.\r\n            var /** @type {?} */ value: string = this.translate(item[keyName]);\r\n            // Adds a new column for translated values.\r\n            var /** @type {?} */ translated: string = keyName.concat(\"Translated\");\r\n            // Updates the value in the list.\r\n            item[translated] = value;\r\n\r\n        }\r\n\r\n        var /** @type {?} */ locale: string = this.addExtension(this.locale.getCurrentLanguage(), extension);\r\n\r\n        // Intl.Collator.\r\n        var /** @type {?} */ collator: Intl.Collator = new Intl.Collator(locale, options); // It can be passed directly to Array.prototype.sort.\r\n\r\n        list.sort((a: any, b: any) => {\r\n\r\n            return collator.compare(a[translated], b[translated]);\r\n\r\n        });\r\n\r\n        // Removes the column of translated values.\r\n        var /** @type {?} */ index: number = list.indexOf(translated, 0);\r\n        if (index > -1) {\r\n            list.splice(index, 1);\r\n        }\r\n\r\n        // Descending order.\r\n        if (order != null && order == \"desc\") {\r\n\r\n            list.reverse();\r\n\r\n        }\r\n\r\n        return list;\r\n\r\n    }\n/**\n * Sorts an array of objects or an array of arrays by the current language code.\r\r\\@param list The array to be sorted\r\\@param keyName The column that contains the keys of the values to be ordered\r\\@param order 'asc' or 'desc'. The default value is 'asc'.\r\\@param extension\r\\@param options\r\\@return An observable of the sorted list or of the same list if Intl.Collator is not supported\r\\@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} list\n * @param {?} keyName\n * @param {?=} order\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic sortAsync(list: Array<any>, keyName: any, order?: string, extension?: string, options?: any): Observable<Array<any>> {\r\n\r\n        return Observable.create((observer: Observer<Array<any>>) => {\r\n\r\n            // Gets the sorted list.\r\n            observer.next(this.sort(list, keyName, order, extension, options));\r\n            observer.complete();\r\n\r\n        });\r\n\r\n    }\n/**\n * Matches a string into an array of objects or an array of arrays.\r\r\\@param s The string to search\r\\@param list The array to look for\r\\@param keyNames An array that contains the columns to look for\r\\@param options\r\\@return A filtered list or the same list if Intl.Collator is not supported\r\\@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} s\n * @param {?} list\n * @param {?} keyNames\n * @param {?=} options\n * @return {?}\n */\npublic search(s: string, list: Array<any>, keyNames: any[], options: any = { usage: 'search' }): Array<any> {\r\n\r\n        if (list == null || keyNames == null || s == \"\" || IntlSupport.Collator(this.locale.getCurrentLanguage()) == false) { return list; }\r\n\r\n        // Gets the value of translation for the each column.\r\n        var /** @type {?} */ translated: Array<string> = new Array<string>();\r\n\r\n        var /** @type {?} */ i: number = 0;\r\n        for (var /** @type {?} */ i: number = 0; i < keyNames.length; i++) {\r\n\r\n            // Adds a new column for translated values.\r\n            translated.push(keyNames[i].concat(\"Translated\"));\r\n\r\n            for (let /** @type {?} */ item of list) {\r\n\r\n                // Gets the values of translation for the column.\r\n                var /** @type {?} */ value: string = this.translate(item[keyNames[i]]);\r\n                // Updates the value in the list.\r\n                item[translated[i]] = value;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        var /** @type {?} */ locale: string = this.locale.getCurrentLanguage();\r\n\r\n        // Intl.Collator.\r\n        var /** @type {?} */ collator: Intl.Collator = new Intl.Collator(locale, options);\r\n\r\n        var /** @type {?} */ matches: Array<any> = list.filter((v: any) => {\r\n\r\n            var /** @type {?} */ found: boolean = false;\r\n            for (var /** @type {?} */ i: number = 0; i < translated.length; i++) {\r\n\r\n                // Calls matching algorithm.\r\n                if (this.match(v[translated[i]], s, collator)) {\r\n\r\n                    found = true;\r\n                    break;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            return found;\r\n\r\n        });\r\n\r\n        // Removes the columns of translated values.\r\n        for (var /** @type {?} */ i: number = 0; i < translated.length; i++) {\r\n\r\n            var /** @type {?} */ index: number = matches.indexOf(translated[i], 0);\r\n            if (index > -1) {\r\n                matches.splice(index, 1);\r\n            }\r\n\r\n        }\r\n\r\n        return matches;\r\n\r\n    }\n/**\n * Matches a string into an array of objects or an array of arrays.\r\r\\@param s The string to search\r\\@param list The array to look for\r\\@param keyNames An array that contains the columns to look for\r\\@param options\r\\@return An observable for each element of the filtered list or the same list if Intl.Collator is not supported\r\\@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} s\n * @param {?} list\n * @param {?} keyNames\n * @param {?=} options\n * @return {?}\n */\npublic searchAsync(s: string, list: Array<any>, keyNames: any[], options: any = { usage: 'search' }): Observable<any> {\r\n\r\n        if (list == null) { return null; }\r\n\r\n        if (keyNames == null || s == \"\" || IntlSupport.Collator(this.locale.getCurrentLanguage()) == false) {\r\n\r\n            return Observable.create((observer: Observer<any>) => {\r\n\r\n                for (let /** @type {?} */ item of list) {\r\n\r\n                    observer.next(item);\r\n\r\n                }\r\n\r\n                observer.complete();\r\n\r\n            });\r\n\r\n        }\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n\r\n            // Gets the value of translation for the each column.\r\n            var /** @type {?} */ translated: Array<string> = new Array<string>();\r\n\r\n            var /** @type {?} */ i: number = 0;\r\n            for (var /** @type {?} */ i: number = 0; i < keyNames.length; i++) {\r\n\r\n                // Adds a new column for translated values.\r\n                translated.push(keyNames[i].concat(\"Translated\"));\r\n\r\n                for (let /** @type {?} */ item of list) {\r\n\r\n                    // Gets the values of translation for the column.\r\n                    var /** @type {?} */ value: string = this.translate(item[keyNames[i]]);\r\n                    // Updates the value in the list.\r\n                    item[translated[i]] = value;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            var /** @type {?} */ locale: string = this.locale.getCurrentLanguage();\r\n\r\n            // Intl.Collator.\r\n            var /** @type {?} */ collator: Intl.Collator = new Intl.Collator(locale, options);\r\n\r\n            for (let /** @type {?} */ v of list) {\r\n\r\n                for (var /** @type {?} */ i: number = 0; i < translated.length; i++) {\r\n\r\n                    // Calls matching algorithm.\r\n                    if (this.match(v[translated[i]], s, collator)) {\r\n\r\n                        observer.next(v);\r\n                        break;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            // Removes the columns of translated values.\r\n            for (var /** @type {?} */ i: number = 0; i < translated.length; i++) {\r\n\r\n                var /** @type {?} */ index: number = list.indexOf(translated[i], 0);\r\n                if (index > -1) {\r\n                    list.splice(index, 1);\r\n                }\r\n\r\n            }\r\n\r\n            observer.complete();\r\n\r\n        });\r\n\r\n    }\n/**\n * @param {?} locale\n * @param {?=} extension\n * @return {?}\n */\nprivate addExtension(locale: string, extension?: string): string {\r\n\r\n        // Adds extension.\r\n        if (extension != null && extension != \"\") {\r\n\r\n            locale = locale + \"-\" + extension;\r\n\r\n        }\r\n\r\n        return locale;\r\n\r\n    }\n/**\n * Matching algorithm.\r\r\\@param v The value\r\\@param s The string to search\r\\@return True if match, otherwise false\n * @param {?} v\n * @param {?} s\n * @param {?} collator\n * @return {?}\n */\nprivate match(v: string, s: string, collator: Intl.Collator): boolean {\r\n\r\n        var /** @type {?} */ vLength: number = v.length;\r\n        var /** @type {?} */ sLength: number = s.length;\r\n\r\n        if (sLength > vLength) { return false; } // The search string is longer than value.\r\n\r\n        if (sLength == vLength) {\r\n\r\n            return collator.compare(v, s) === 0;\r\n\r\n        }\r\n\r\n        // Tries to search the substring.\r\n        var /** @type {?} */ found: boolean = false;\r\n        for (var /** @type {?} */ i: number = 0; i < vLength - (sLength - 1); i++) {\r\n\r\n            var /** @type {?} */ str: string = v.substr(i, sLength);\r\n            if (collator.compare(str, s) === 0) {\r\n\r\n                found = true;\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return found;\r\n\r\n    }\n/**\n * Asynchronous loading: gets translation data.\n * @param {?} language\n * @return {?}\n */\nprivate getTranslation(language: string): void {\r\n\r\n        // Initializes the translation data & the service state.\r\n        this.translationData = {};\r\n        this.serviceState = ServiceState.isLoading;\r\n\r\n        var /** @type {?} */ observableSequencesOfTranslationData: Array<Observable<any>> = [];\r\n\r\n        for (let /** @type {?} */ provider of this.providers) {\r\n\r\n            // Builds the URL.\r\n            var /** @type {?} */ url: string = provider.prefix;\r\n\r\n            if (provider.webAPI == true) {\r\n\r\n                // Absolute URL for Web API.\r\n                url += language;\r\n\r\n            } else {\r\n\r\n                // Relative server path for 'json' files.\r\n                url += language + \".\" + provider.dataFormat;\r\n\r\n            }\r\n\r\n            observableSequencesOfTranslationData.push(this.getTranslationByProvider(url));\r\n\r\n        }\r\n\r\n        // Merges all the observable sequences into a single observable sequence.\r\n        Observable.merge(...observableSequencesOfTranslationData).subscribe(\r\n            // Next.\r\n            (data: any) => {\r\n\r\n                // Adds response to the translation data.\r\n                this.addData(data, language);\r\n\r\n            },\r\n            // Error.\r\n            (error: any) => {\r\n\r\n                console.error(\"Localization service:\", error);\r\n\r\n            },\r\n            // Complete.\r\n            () => {\r\n\r\n                this.translationComplete(language);\r\n\r\n            }\r\n\r\n        );\r\n\r\n    }\n/**\n * @param {?} url\n * @return {?}\n */\nprivate getTranslationByProvider(url: string): Observable<any> {\r\n\r\n        return this.http.get(url)\r\n            .map((res: Response) => res.json());\r\n\r\n    }\n/**\n * Adds or extends translation data.\n * @param {?} data\n * @param {?} language\n * @return {?}\n */\nprivate addData(data: any, language: string): void {\r\n\r\n        this.translationData[language] = (typeof this.translationData[language] != \"undefined\") ? this.extend(this.translationData[language], data) : data;\r\n\r\n    }\n/**\n * Merges objects.\n * @param {...?} args\n * @return {?}\n */\nprivate extend(...args: Array<any>): any {\r\n\r\n        const /** @type {?} */ newObj: any = {};\r\n\r\n        for (let /** @type {?} */ obj of args) {\r\n            for (let /** @type {?} */ key in obj) {\r\n\r\n                // Copies all the fields.\r\n                newObj[key] = obj[key];\r\n\r\n            }\r\n        }\r\n\r\n        return newObj;\r\n\r\n    }\n/**\n * @param {?} language\n * @return {?}\n */\nprivate translationComplete(language: string): void {\r\n\r\n        // Updates the service state.\r\n        this.serviceState = ServiceState.isReady;\r\n\r\n        // Updates the language code of the service: all the translate pipe will invoke the trasform method.\r\n        this.languageCode = language;\r\n\r\n        // Sends an event for the components.\r\n        this.translationChanged.emit(language);\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: LocaleService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'translationChanged': [{ type: Output },],\n};\n}\n\nfunction LocalizationService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalizationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalizationService.ctorParameters;\n/** @type {?} */\nLocalizationService.propDecorators;\n/**\n * Output for event translation changed.\n * @type {?}\n */\nLocalizationService.prototype.translationChanged;\n/**\n * The language code for the service.\n * @type {?}\n */\nLocalizationService.prototype.languageCode;\n/**\n * The loading mode for the service.\n * @type {?}\n */\nLocalizationService.prototype.loadingMode;\n/**\n * The service state.\n * @type {?}\n */\nLocalizationService.prototype.serviceState;\n/**\n * Enable/disable locale as language.\n * @type {?}\n */\nLocalizationService.prototype.enableLocale;\n/**\n * The providers for the asynchronous loading.\n * @type {?}\n */\nLocalizationService.prototype.providers;\n/**\n * The translation data: {languageCode: {key: value}}.\n * @type {?}\n */\nLocalizationService.prototype.translationData;\n/**\n * Value for missing keys.\n * @type {?}\n */\nLocalizationService.prototype.missingValue;\n/**\n * Key for missing keys.\n * @type {?}\n */\nLocalizationService.prototype.missingKey;\n/**\n * Option for composed key.\n * @type {?}\n */\nLocalizationService.prototype.composedKey;\n/**\n * Separator for composed key.\n * @type {?}\n */\nLocalizationService.prototype.keySeparator;\n/** @type {?} */\nLocalizationService.prototype.http;\n/** @type {?} */\nLocalizationService.prototype.locale;\n}\n\n/**\n * Defines the provider for asynchronous loading of the translation data.\n */\nclass Provider {\r\n\r\n    prefix: string;\r\n\r\n    dataFormat: string;\r\n\r\n    webAPI: boolean;\r\n\r\n}\n\nfunction Provider_tsickle_Closure_declarations() {\n/** @type {?} */\nProvider.prototype.prefix;\n/** @type {?} */\nProvider.prototype.dataFormat;\n/** @type {?} */\nProvider.prototype.webAPI;\n}\n\nexport type ServiceState = number;\nexport let ServiceState: any = {};\nServiceState.isReady = 0;\nServiceState.isLoading = 1;\nServiceState.isWaiting = 2;\nServiceState[ServiceState.isReady] = \"isReady\";\nServiceState[ServiceState.isLoading] = \"isLoading\";\nServiceState[ServiceState.isWaiting] = \"isWaiting\";\n\nexport type LoadingMode = number;\nexport let LoadingMode: any = {};\nLoadingMode.Direct = 0;\nLoadingMode.Async = 1;\nLoadingMode[LoadingMode.Direct] = \"Direct\";\nLoadingMode[LoadingMode.Async] = \"Async\";\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}